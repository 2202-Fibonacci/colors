type Query {
  info: String!
  station(id: ID): Station
  arrivalTimes(stationId: String, train: String, direction: String): TripUpdate
  serviceAlert(train: String, onlyActive: Boolean): ServiceUpdate
  elevatorAlert(stationId: String): [ElevatorUpdate]
  stationUpdate(stationId: String): [TripUpdate]
  commentFeed: [Comment]
  getFavorites:[Station]
  getUser(userId:ID):User
}

type Mutation {
  post(text: String!):Comment!
  signup(email: String!, password: String!, username:String!): AuthPayload
  login(email:String!, password:String!): AuthPayload
  favorite(stopId: String!):Station
}

type ElevatorUpdate {
  station: String
  borough: String
  trainno: String
  equipment: String
  equipmenttype: String
  serving: String
  ADA: String
  outagedate: String
  estimatedreturntoservice: String
  reason: String
  isupcomingoutage: String
  ismaintenanceoutage: String
}

type TripUpdate {
  routeId: String
  stationId: String
  nextArrivals: [Arrival]
}

type Arrival {
  tripId: String
  direction: String
  arrivalTime: Int
}

type ServiceUpdate {
  routeId: String
  alerts: [Alert]
}

type Alert {
  type: String
  text: String
  activePeriodText: String
}

type Station {
  id: ID!
  name: String!
  trainLines: String #[Train] #TODO: set this to see
  lat: Float!
  long: Float!
  borough: String
  accessible: Boolean! #this means wheelchair accessible?
  stopId: String
}

# enum Direction {
#   N
#   S
# }

type User {
  id: ID!
  username: String!
  email: String!
  password: String!
  routes: [Route]
  points: Int
  comments: [Comment]
  stations: [Station!]
}

type StationsFavoredByUsers {
  user: User
  station: Station
}

type AuthPayload {
  token: String
  user: User
}

type Route {
  TripUpdate: TripUpdate
  ServiceUpdate: ServiceUpdate
}

type Comment {
  id: ID!
  text: String
  postedBy: User
  confirms: Int
}